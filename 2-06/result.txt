Let’s reason step-by-step based on your requirements and use case.

1. Data Model and Use Case
Profiles: Structured data per user — fits well in a relational or document model.

Posts: Time-series like data with high read/write access — usually document or column-oriented DBs.

Connections (friend/follow graph): Highly relational graph-like data — optimal for graph databases, but can be modeled in relational/NoSQL with trade-offs.

2. Access Pattern
80% reads, 20% writes: You need a database optimized for high read throughput.

Likely use cases:

Fetch profile and posts quickly.

Show follower/following relationships efficiently.

Feed generation (read-intensive, possibly requiring complex joins or graph traversal).

3. Scalability
Millions of users, rapid growth: Scalability (especially horizontal) is critical.

NoSQL options shine here, but NewSQL and some relational databases with sharding also perform well.

4. Analysis of Database Types
Type	Pros	Cons
Relational (PostgreSQL, MySQL)	Strong consistency, mature, structured schema	Harder to scale horizontally, less efficient for graph-like data
Document (MongoDB, Couchbase)	Flexible schema, easy horizontal scaling, good for posts/profiles	Not optimal for relational (friend graphs), eventual consistency issues
Graph (Neo4j, Amazon Neptune)	Excellent for friend/follow relationships, fast traversal	Doesn’t scale as easily, harder to manage high-volume posts
Wide-Column (Cassandra)	Very high write and read throughput, linearly scalable	More complex modeling, limited support for complex relationships
NewSQL (CockroachDB, YugabyteDB)	Horizontal scaling + relational capabilities	Still maturing, operational complexity

5. Recommendation: Hybrid Architecture
To make the best possible unformatted decision, go with a polyglot persistence strategy:

MongoDB or Couchbase for:

User profiles (document model fits well)

Posts (frequent reads, embedded documents, TTL, etc.)

Easily shardable for scale

Redis for:

Caching hot data (profiles, feeds, etc.)

Feed precomputation or real-time ranking

Neo4j or Amazon Neptune for:

Modeling and querying connections (friends/follows)

Supports fast traversal, mutual friends, etc.

(Optional) ElasticSearch:

For full-text search on posts, user bios, etc.

Final Verdict
Use MongoDB for primary storage of profiles and posts, Redis for caching, and Neo4j for social graph connections. Combine with a message queue (e.g. Kafka or RabbitMQ) to decouple write operations and enable background processing. This setup is horizontally scalable, read-optimized, and handles all your data structures efficiently.

Let me know if you want a breakdown of infrastructure setup or data schema per DB.